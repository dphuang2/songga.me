
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."limit_team_membership"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    IF (SELECT COUNT(*) FROM player_team_membership WHERE team_id = NEW.team_id) >= 2 THEN
        RAISE EXCEPTION 'Cannot have more than 2 players in the same team';
    END IF;
    RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."limit_team_membership"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."game" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "creator" "uuid" NOT NULL,
    "slug" "text" DEFAULT ''::"text" NOT NULL,
    "started" boolean
);

ALTER TABLE "public"."game" OWNER TO "postgres";

COMMENT ON TABLE "public"."game" IS 'Instance of a song game';

COMMENT ON COLUMN "public"."game"."creator" IS 'user who created the game';

COMMENT ON COLUMN "public"."game"."slug" IS 'a human-friendly ID for identifying this game';

ALTER TABLE "public"."game" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Game_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."player_team_membership" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "team_id" bigint NOT NULL,
    "player_id" bigint NOT NULL
);

ALTER TABLE "public"."player_team_membership" OWNER TO "postgres";

COMMENT ON TABLE "public"."player_team_membership" IS 'Players in teams';

ALTER TABLE "public"."player_team_membership" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."game_user_membership_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."player" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "custom_name" "text"
);

ALTER TABLE "public"."player" OWNER TO "postgres";

COMMENT ON TABLE "public"."player" IS 'one-to-one relationship to user';

ALTER TABLE "public"."player" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."player_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."team" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "game_id" bigint NOT NULL
);

ALTER TABLE "public"."team" OWNER TO "postgres";

COMMENT ON TABLE "public"."team" IS 'team of players in a game';

ALTER TABLE "public"."team" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."team_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."game"
    ADD CONSTRAINT "Game_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."game"
    ADD CONSTRAINT "game_slug_key" UNIQUE ("slug");

ALTER TABLE ONLY "public"."player"
    ADD CONSTRAINT "player_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."player_team_membership"
    ADD CONSTRAINT "player_team_membership_pkey" PRIMARY KEY ("team_id", "player_id");

ALTER TABLE ONLY "public"."player"
    ADD CONSTRAINT "player_user_id_key" UNIQUE ("user_id");

ALTER TABLE ONLY "public"."team"
    ADD CONSTRAINT "team_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "check_team_membership" BEFORE INSERT OR DELETE OR UPDATE ON "public"."player_team_membership" FOR EACH ROW EXECUTE FUNCTION "public"."limit_team_membership"();

ALTER TABLE "public"."player_team_membership" DISABLE TRIGGER "check_team_membership";

ALTER TABLE ONLY "public"."game"
    ADD CONSTRAINT "game_creator_fkey" FOREIGN KEY ("creator") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."player_team_membership"
    ADD CONSTRAINT "player_team_membership_player_id_fkey" FOREIGN KEY ("player_id") REFERENCES "public"."player"("id");

ALTER TABLE ONLY "public"."player_team_membership"
    ADD CONSTRAINT "player_team_membership_team_id_fkey" FOREIGN KEY ("team_id") REFERENCES "public"."team"("id");

ALTER TABLE ONLY "public"."player"
    ADD CONSTRAINT "player_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."team"
    ADD CONSTRAINT "team_game_id_fkey" FOREIGN KEY ("game_id") REFERENCES "public"."game"("id");

CREATE POLICY "Enable delete access for authenticated users" ON "public"."player_team_membership" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."game" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."player" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."player_team_membership" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."team" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."game" FOR SELECT TO "authenticated", "anon" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."player" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."team" FOR SELECT USING (true);

CREATE POLICY "Enable read access for authenticated users" ON "public"."player_team_membership" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."game" FOR UPDATE TO "authenticated" USING (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."player_team_membership" FOR UPDATE TO "authenticated" USING (true);

CREATE POLICY "Users can update their own rows" ON "public"."player" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

ALTER TABLE "public"."game" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."player" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."player_team_membership" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."team" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."game";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."player";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."player_team_membership";

ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."team";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."limit_team_membership"() TO "anon";
GRANT ALL ON FUNCTION "public"."limit_team_membership"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."limit_team_membership"() TO "service_role";

GRANT ALL ON TABLE "public"."game" TO "anon";
GRANT ALL ON TABLE "public"."game" TO "authenticated";
GRANT ALL ON TABLE "public"."game" TO "service_role";

GRANT ALL ON SEQUENCE "public"."Game_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Game_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Game_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."player_team_membership" TO "anon";
GRANT ALL ON TABLE "public"."player_team_membership" TO "authenticated";
GRANT ALL ON TABLE "public"."player_team_membership" TO "service_role";

GRANT ALL ON SEQUENCE "public"."game_user_membership_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."game_user_membership_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."game_user_membership_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."player" TO "anon";
GRANT ALL ON TABLE "public"."player" TO "authenticated";
GRANT ALL ON TABLE "public"."player" TO "service_role";

GRANT ALL ON SEQUENCE "public"."player_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."player_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."player_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."team" TO "anon";
GRANT ALL ON TABLE "public"."team" TO "authenticated";
GRANT ALL ON TABLE "public"."team" TO "service_role";

GRANT ALL ON SEQUENCE "public"."team_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."team_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."team_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
